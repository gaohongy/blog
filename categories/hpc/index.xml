<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>HPC - Category -</title><link>https://gaohongy.github.io/blog/categories/hpc/</link><description>HPC - Category |</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 04 Jun 2024 11:38:22 +0800</lastBuildDate><atom:link href="https://gaohongy.github.io/blog/categories/hpc/" rel="self" type="application/rss+xml"/><item><title>Several Methods For Obtaining Time</title><link>https://gaohongy.github.io/blog/posts/hpc/several-methods-for-obtaining-time/</link><pubDate>Tue, 04 Jun 2024 11:38:22 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/several-methods-for-obtaining-time/</guid><description><![CDATA[<p>We can reference <a href="http://www.wangkaixuan.tech/?p=840"target="_blank" rel="external nofollow noopener noreferrer">this article</a></p>
<p>About the last method that using rdtsc assembly command to obtain time, there are some error prone points, we can reference to <a href="http://www.wangkaixuan.tech/?p=901"target="_blank" rel="external nofollow noopener noreferrer">this article</a>.</p>
<p>If you want to learn about the TST, please reference to <a href="https://oliveryang.net/2015/09/pitfalls-of-TSC-usage/"target="_blank" rel="external nofollow noopener noreferrer">this article</a>.</p>]]></description></item><item><title>SIMD Extension</title><link>https://gaohongy.github.io/blog/posts/hpc/simd-extension/</link><pubDate>Mon, 03 Jun 2024 16:09:29 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/simd-extension/</guid><description><![CDATA[<h2 id="说明" class="heading-element"><span>说明</span>
  <a href="#%e8%af%b4%e6%98%8e" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item><item><title>OpenMP</title><link>https://gaohongy.github.io/blog/posts/hpc/openmp/</link><pubDate>Tue, 30 Apr 2024 20:49:00 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/openmp/</guid><description><![CDATA[<h2 id="check-the-openmp-version" class="heading-element"><span>Check the OpenMP version</span>
  <a href="#check-the-openmp-version" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item><item><title>Matrix Multiplication</title><link>https://gaohongy.github.io/blog/posts/hpc/matrix-multiplication/</link><pubDate>Sun, 28 Apr 2024 10:00:06 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/matrix-multiplication/</guid><description><![CDATA[<ol>
<li>GEMM（General Matrix Multiplication）-通用矩阵乘</li>
<li>BLAS (Basic Linear Algebra Subprograms) - 基本线性代数子程序</li>
<li>SGEMM (Single precision General Matrix Multiply) - 单精度矩阵乘法</li>
<li>DGEMM (Double precision General Matrix Multiply) - 双精度矩阵乘法</li>
<li>CGEMM (Complex single precision General Matrix Multiply) - 单精度复数矩阵乘法</li>
<li>ZGEMM (Complex double precision General Matrix Multiply) - 双精度复数矩阵乘法</li>
</ol>
<h2 id="matrix--vector" class="heading-element"><span>Matrix &amp; Vector</span>
  <a href="#matrix--vector" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item><item><title>Memory Alignment</title><link>https://gaohongy.github.io/blog/posts/hpc/memory-alignment/</link><pubDate>Sat, 23 Mar 2024 21:08:23 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/memory-alignment/</guid><description><![CDATA[<p>内存的编址单位是字节</p>
<p>但是内存 IO 的单位是字长，此数值应当和 数据通路 的宽度有关，当数据通路为 32 位时，那么一次内存 IO 就会读取4B数据<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>]]></description></item><item><title>Parallel Computing</title><link>https://gaohongy.github.io/blog/posts/hpc/parallel-computing/</link><pubDate>Mon, 29 Jan 2024 23:41:59 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/parallel-computing/</guid><description><![CDATA[<h2 id="law" class="heading-element"><span>Law</span>
  <a href="#law" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item><item><title>Kokkos Source Code Analysis</title><link>https://gaohongy.github.io/blog/posts/hpc/kokkos-source-code-analysis/</link><pubDate>Fri, 05 Jan 2024 17:39:32 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/kokkos-source-code-analysis/</guid><description><![CDATA[<h2 id="usage" class="heading-element"><span>Usage</span>
  <a href="#usage" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item><item><title>MPI</title><link>https://gaohongy.github.io/blog/posts/hpc/mpi/</link><pubDate>Tue, 12 Dec 2023 21:49:28 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/mpi/</guid><description><![CDATA[<p>mpicc, mpic++, mpicxx
mpiexec, mpirun
mpichversion</p>
<p>mpicc 仅可编译 .c 文件，编译 .cpp文件会报错
mpic++ 编译 .cpp 文件</p>
<p>MPI标准的不同实现：MPICH、MVAPICH、MVAPICH2、Open MPI</p>]]></description></item><item><title>C++ asynchronous and synchronous mechanisms</title><link>https://gaohongy.github.io/blog/posts/c-c++/c++-asynchronous-and-synchronous-mechanisms/</link><pubDate>Sun, 10 Sep 2023 22:06:00 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/c-c++/c++-asynchronous-and-synchronous-mechanisms/</guid><description><![CDATA[<h2 id="asynchronization-multithreading" class="heading-element"><span>Asynchronization (Multithreading)</span>
  <a href="#asynchronization-multithreading" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item><item><title>GPU Structure and Programing</title><link>https://gaohongy.github.io/blog/posts/hpc/gpu-structure-and-programing/</link><pubDate>Wed, 31 May 2023 11:17:35 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/hpc/gpu-structure-and-programing/</guid><description><![CDATA[<h2 id="todo" class="heading-element"><span>Todo</span>
  <a href="#todo" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></pa]]></description></item></channel></rss>