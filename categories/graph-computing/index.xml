<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Graph-Computing - 分类 -</title><link>https://gaohongy.github.io/blog/categories/graph-computing/</link><description>Graph-Computing - 分类 -</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 07 Mar 2024 21:26:29 +0800</lastBuildDate><atom:link href="https://gaohongy.github.io/blog/categories/graph-computing/" rel="self" type="application/rss+xml"/><item><title>Graph Compiler</title><link>https://gaohongy.github.io/blog/posts/graph-computing/graph-compiler/</link><pubDate>Thu, 07 Mar 2024 21:26:29 +0800</pubDate><author>ghy</author><guid>https://gaohongy.github.io/blog/posts/graph-computing/graph-compiler/</guid><description>整体理解 通过将领域专用计算模型抽象为统一的稀疏矩阵计算模型，领域专用计算模型应该指的是像GraphScope，DGL或者说CGA这种计算模式</description></item><item><title>MLIR</title><link>https://gaohongy.github.io/blog/posts/graph-computing/mlir/</link><pubDate>Thu, 07 Mar 2024 21:26:29 +0800</pubDate><author>ghy</author><guid>https://gaohongy.github.io/blog/posts/graph-computing/mlir/</guid><description>目前涉及到两个关键的概念：MLIR 和 LLVM1。LLVM 通过引入 IR 的概念，减轻了传统编译器前后端之间的强耦合关系。与此同时也凸显出了模块化的</description></item><item><title>Legion Source Code Analysis</title><link>https://gaohongy.github.io/blog/posts/graph-computing/legion-source-code-analysis/</link><pubDate>Tue, 05 Mar 2024 20:17:06 +0800</pubDate><author>ghy</author><guid>https://gaohongy.github.io/blog/posts/graph-computing/legion-source-code-analysis/</guid><description>项目文件分类 Storage GPU_Graph_Storage.[cuh] GPUGraphStore.[cu/cuh] 这两个的区别可能在于下面的是图的逻辑存储结构，上面的是物理存储结构(因为涉及到了CSR) GPU_Memory_Graph_Storage.[cu] GPU_Node_Storage.[cuh] Cache GPUCache.[cu/cuh] GPU_IPC_Service.[cu/h] GPUMemoryPool.[cu/cuh] hashmap.[h] helper_multiprocess.[cpp/h] Kernels.[cu/cuh] Operator.[cu/h] Server.[cu/h] 初始化 GPUServer-&amp;gt;Initialize 获取</description></item><item><title>Graph Computing</title><link>https://gaohongy.github.io/blog/posts/graph-computing/graph-computing/</link><pubDate>Thu, 29 Feb 2024 15:59:15 +0800</pubDate><author>ghy</author><guid>https://gaohongy.github.io/blog/posts/graph-computing/graph-computing/</guid><description>图计算现有研究和发展现状 通用图计算软件类型： 基于遍历算法的、实时的图数据库 : Neo4j、OrientDB、DEX 和 InfiniteGraph 以图顶点为中心的、基于消</description></item></channel></rss>