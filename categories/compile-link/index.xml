<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Compile-Link - Category -</title><link>https://gaohongy.github.io/blog/categories/compile-link/</link><description>Compile-Link - Category |</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 02 Aug 2024 09:54:09 +0800</lastBuildDate><atom:link href="https://gaohongy.github.io/blog/categories/compile-link/" rel="self" type="application/rss+xml"/><item><title>Program Loading</title><link>https://gaohongy.github.io/blog/posts/compile-link/program-loading/</link><pubDate>Fri, 02 Aug 2024 09:54:09 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/program-loading/</guid><description><![CDATA[<p>Before the program running, static loader or dynamic loader need to initialize the content of the progress stack which is stipulated by <a href="https://jyywiki.cn/OS/manuals/sysv-abi.pdf"target="_blank" rel="external nofollow noopener noreferrer">System V Application Binary Interface</a>.</p>
<p><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png?size=large" data-thumbnail="https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png?size=small" data-sub-html="<h2>https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png</h2>"><img loading="lazy" src="https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png" alt="https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png" srcset="https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png?size=small, https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png?size=medium 1.5x, https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png?size=large 2x" data-title="https://cdn.jsdelivr.net/gh/gaohongy/cloudImages@master/202408020952442.png" style="background: url(/blog/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>]]></description></item><item><title>ELF File Format Analysis</title><link>https://gaohongy.github.io/blog/posts/compile-link/elf-file-format-analysis/</link><pubDate>Thu, 13 Jun 2024 14:49:02 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/elf-file-format-analysis/</guid><description><![CDATA[<h2 id="what-is-elf-" class="heading-element"><span>What is ELF ?</span>
  <a href="#what-is-elf-" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>ELF: Executable and Linkable Format, 可执行与可链接格式</p>]]></description></item><item><title>Heterogeneous Compilation</title><link>https://gaohongy.github.io/blog/posts/compile-link/heterogeneous-compilation/</link><pubDate>Fri, 07 Jun 2024 09:49:52 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/heterogeneous-compilation/</guid><description><![CDATA[<p>与 <a href="https://gaohongy.github.io/blog/posts/compile-link/cuda-compilation/"target="_blank" rel="external nofollow noopener noreferrer">CUDA Compilation</a> 不同在于</p>
<p>The tools used in the CUDA compilation are all closed source except gcc, g++ etc., for example fatbinary and nvlink. We need to substitue these tools to tools in clang system.</p>
<ol>
<li>Clang Offload Bundler is used to combined different code for different machine structurel.</li>
<li>Clang Offload Packager is used to embed device code into host code.</li>
<li>Clang Linker Wrapper is used to .</li>
</ol>
<p>这里面最复杂的感觉是怎么处理链接关系，如果仅仅说代码嵌入，从 CUDA 的流程来看，在 cudafe1.cpp include stub.c 生成 .o 这一步中 host code 中就已经包含了 device code，如果仅仅说 embed 的话，这显然就已经完成了，但是为何 CUDA 还进行后续那么多步骤，因为这一步生成的 .o 显然是无法运行的，device code 都还只是一个 extern signal，还需要同 CUDA runtime library 进行链接，这个过程该怎么进行比较难想。</p>]]></description></item><item><title>C C++ Compile</title><link>https://gaohongy.github.io/blog/posts/compile-link/c-c++-compile/</link><pubDate>Sun, 31 Dec 2023 21:54:31 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/c-c++-compile/</guid><description><![CDATA[<h2 id="名词辨析" class="heading-element"><span>名词辨析</span>
  <a href="#%e5%90%8d%e8%af%8d%e8%be%a8%e6%9e%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="gnu" class="heading-element"><span>GNU</span>
  <a href="#gnu" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>GNU&rsquo;s Not Unix!的递归缩写</li>
<li>一个自由的<strong>操作系统</strong>,起源于GNU计划,希望发展出一套完整的开放源代码操作系统来取代 Unix</li>
<li>基本组成包括：
<ul>
<li><a href="">GNU编译器套装（GCC）</a></li>
<li>GNU的C库（glibc）</li>
<li>GNU核心工具组（coreutils）</li>
</ul>
</li>
</ul>
<h3 id="gcc" class="heading-element"><span>GCC</span>
  <a href="#gcc" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li><a href="https://gcc.gnu.org/index.html"target="_blank" rel="external nofollow noopener noreferrer">GNU Compiler Collection</a>, GNU编译器套装，最初是为了GNU操作系统而编写的编译器。</li>
<li>有多种<a href="https://www.cnblogs.com/G-H-Y/p/17061801.html"target="_blank" rel="external nofollow noopener noreferrer">语言前端</a>，可用于解析不同的编程语言、操作系统、计算机系统结构，是GNU计划的关键部分，也是GNU工具链的主要组成部分之一</li>
<li>可以编译C、C++、JAV、Fortran、Pascal、Object-C、Ada，Go等语言</li>
</ul>
<h3 id="gccgmingw" class="heading-element"><span>gcc/g++/MinGW</span>
  <a href="#gccgmingw" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>gcc: GCC中的GUN C Compiler（C 编译器）</li>
<li>g++: GUN C++ Compiler（C++编译器）</li>
<li>MinGW: Minimalist GNU for Windows，是将GCC编译器和GNU Binutils移植到Win32平台下的产物</li>
</ul>
<p>但根据<a href="https://www.cnblogs.com/samewang/p/4774180.html"target="_blank" rel="external nofollow noopener noreferrer">GCC的gcc和g++区别</a>的说法，gcc和g++并不是编译器，它们只是一种驱动器<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，它们会根据参数中要编译的文件的类型，调用对应的GUN编译器。以编译C语言为例，包含以下过程。</p>]]></description></item><item><title>C C++ Link</title><link>https://gaohongy.github.io/blog/posts/compile-link/c-c++-link/</link><pubDate>Sun, 31 Dec 2023 21:54:31 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/c-c++-link/</guid><description>&lt;p>链接，将多个可重定位目标文件和标准库函数合并为可执行目标文件的过程，为了解决外部内存地址的依赖问题&lt;/p>
&lt;p>在链接之前，各个程序模块都是相互独立的，模块A所使用到的模块B的内容，在模块A的视角下仅仅是一个符号，并不清楚其具体内容。链接过程可以理解为把模块B的内容结合到A中。整个过程类似搭积木最后的模块拼接过程。而这一拼接过程，采用专业术语来表达，即重定向。&lt;/p></description></item><item><title>Compiler Principle</title><link>https://gaohongy.github.io/blog/posts/compile-link/compiler-principle/</link><pubDate>Sun, 31 Dec 2023 21:54:31 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/compiler-principle/</guid><description><![CDATA[<h2 id="what-does-compiler-do-" class="heading-element"><span>What does compiler do ?</span>
  <a href="#what-does-compiler-do-" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Map the source program to a semantically equivalent target program.</p>]]></description></item><item><title>Makefile</title><link>https://gaohongy.github.io/blog/posts/compile-link/makefile/</link><pubDate>Sat, 16 Sep 2023 17:49:00 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/makefile/</guid><description><![CDATA[<h2 id="variablesvariable" class="heading-element"><span>variables<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></span>
  <a href="#variablesvariable" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>It should be noted that the usage of site a variable in makefile is different from using it in shell.</p>]]></description></item><item><title>CMake Make</title><link>https://gaohongy.github.io/blog/posts/compile-link/cmake-make/</link><pubDate>Fri, 16 Jun 2023 23:23:00 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/cmake-make/</guid><description><![CDATA[<h2 id="说明" class="heading-element"><span>说明</span>
  <a href="#%e8%af%b4%e6%98%8e" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>cmake的定义是什么 ？&mdash;&ndash;高级编译配置工具</p>]]></description></item><item><title>CUDA Compilation</title><link>https://gaohongy.github.io/blog/posts/compile-link/cuda-compilation/</link><pubDate>Wed, 31 May 2023 11:17:35 +0800</pubDate><author>Author</author><guid>https://gaohongy.github.io/blog/posts/compile-link/cuda-compilation/</guid><description><![CDATA[<h2 id="compilation-process-analysis" class="heading-element"><span>Compilation process analysis</span>
  <a href="#compilation-process-analysis" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>涉及到两部分内容，一部分是cuda面对编译问题时的设计架构，另一方面是cuda实际的编译流程</p>]]></description></item></channel></rss>